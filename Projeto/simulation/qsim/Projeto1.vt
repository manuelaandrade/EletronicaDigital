// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/19/2021 19:39:36"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Projeto1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Projeto1_vlg_sample_tst(
	clk,
	ini_parar_rein,
	modo,
	reset,
	sampler_tx
);
input  clk;
input  ini_parar_rein;
input  modo;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(clk or ini_parar_rein or modo or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Projeto1_vlg_check_tst (
	7seg_1,
	7seg_2,
	7seg_3,
	7seg_a,
	7seg_b,
	7seg_c,
	7seg_d,
	7seg_e,
	7seg_f,
	7seg_g,
	sampler_rx
);
input  7seg_1;
input  7seg_2;
input  7seg_3;
input  7seg_a;
input  7seg_b;
input  7seg_c;
input  7seg_d;
input  7seg_e;
input  7seg_f;
input  7seg_g;
input sampler_rx;

reg  7seg_1_expected;
reg  7seg_2_expected;
reg  7seg_3_expected;
reg  7seg_a_expected;
reg  7seg_b_expected;
reg  7seg_c_expected;
reg  7seg_d_expected;
reg  7seg_e_expected;
reg  7seg_f_expected;
reg  7seg_g_expected;

reg  7seg_1_prev;
reg  7seg_2_prev;
reg  7seg_3_prev;
reg  7seg_a_prev;
reg  7seg_b_prev;
reg  7seg_c_prev;
reg  7seg_d_prev;
reg  7seg_e_prev;
reg  7seg_f_prev;
reg  7seg_g_prev;

reg  7seg_1_expected_prev;
reg  7seg_2_expected_prev;
reg  7seg_3_expected_prev;
reg  7seg_a_expected_prev;
reg  7seg_b_expected_prev;
reg  7seg_c_expected_prev;
reg  7seg_d_expected_prev;
reg  7seg_e_expected_prev;
reg  7seg_f_expected_prev;
reg  7seg_g_expected_prev;

reg  last_7seg_1_exp;
reg  last_7seg_2_exp;
reg  last_7seg_3_exp;
reg  last_7seg_a_exp;
reg  last_7seg_b_exp;
reg  last_7seg_c_exp;
reg  last_7seg_d_exp;
reg  last_7seg_e_exp;
reg  last_7seg_f_exp;
reg  last_7seg_g_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:10] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 10'b1;
end

// update real /o prevs

always @(trigger)
begin
	7seg_1_prev = 7seg_1;
	7seg_2_prev = 7seg_2;
	7seg_3_prev = 7seg_3;
	7seg_a_prev = 7seg_a;
	7seg_b_prev = 7seg_b;
	7seg_c_prev = 7seg_c;
	7seg_d_prev = 7seg_d;
	7seg_e_prev = 7seg_e;
	7seg_f_prev = 7seg_f;
	7seg_g_prev = 7seg_g;
end

// update expected /o prevs

always @(trigger)
begin
	7seg_1_expected_prev = 7seg_1_expected;
	7seg_2_expected_prev = 7seg_2_expected;
	7seg_3_expected_prev = 7seg_3_expected;
	7seg_a_expected_prev = 7seg_a_expected;
	7seg_b_expected_prev = 7seg_b_expected;
	7seg_c_expected_prev = 7seg_c_expected;
	7seg_d_expected_prev = 7seg_d_expected;
	7seg_e_expected_prev = 7seg_e_expected;
	7seg_f_expected_prev = 7seg_f_expected;
	7seg_g_expected_prev = 7seg_g_expected;
end



// expected 7seg_1
initial
begin
	7seg_1_expected = 1'bX;
end 

// expected 7seg_2
initial
begin
	7seg_2_expected = 1'bX;
end 

// expected 7seg_3
initial
begin
	7seg_3_expected = 1'bX;
end 

// expected 7seg_a
initial
begin
	7seg_a_expected = 1'bX;
end 

// expected 7seg_b
initial
begin
	7seg_b_expected = 1'bX;
end 

// expected 7seg_c
initial
begin
	7seg_c_expected = 1'bX;
end 

// expected 7seg_d
initial
begin
	7seg_d_expected = 1'bX;
end 

// expected 7seg_e
initial
begin
	7seg_e_expected = 1'bX;
end 

// expected 7seg_f
initial
begin
	7seg_f_expected = 1'bX;
end 

// expected 7seg_g
initial
begin
	7seg_g_expected = 1'bX;
end 
// generate trigger
always @(7seg_1_expected or 7seg_1 or 7seg_2_expected or 7seg_2 or 7seg_3_expected or 7seg_3 or 7seg_a_expected or 7seg_a or 7seg_b_expected or 7seg_b or 7seg_c_expected or 7seg_c or 7seg_d_expected or 7seg_d or 7seg_e_expected or 7seg_e or 7seg_f_expected or 7seg_f or 7seg_g_expected or 7seg_g)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected 7seg_1 = %b | expected 7seg_2 = %b | expected 7seg_3 = %b | expected 7seg_a = %b | expected 7seg_b = %b | expected 7seg_c = %b | expected 7seg_d = %b | expected 7seg_e = %b | expected 7seg_f = %b | expected 7seg_g = %b | ",7seg_1_expected_prev,7seg_2_expected_prev,7seg_3_expected_prev,7seg_a_expected_prev,7seg_b_expected_prev,7seg_c_expected_prev,7seg_d_expected_prev,7seg_e_expected_prev,7seg_f_expected_prev,7seg_g_expected_prev);
	$display("| real 7seg_1 = %b | real 7seg_2 = %b | real 7seg_3 = %b | real 7seg_a = %b | real 7seg_b = %b | real 7seg_c = %b | real 7seg_d = %b | real 7seg_e = %b | real 7seg_f = %b | real 7seg_g = %b | ",7seg_1_prev,7seg_2_prev,7seg_3_prev,7seg_a_prev,7seg_b_prev,7seg_c_prev,7seg_d_prev,7seg_e_prev,7seg_f_prev,7seg_g_prev);
`endif
	if (
		( 7seg_1_expected_prev !== 1'bx ) && ( 7seg_1_prev !== 7seg_1_expected_prev )
		&& ((7seg_1_expected_prev !== last_7seg_1_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port 7seg_1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", 7seg_1_expected_prev);
		$display ("     Real value = %b", 7seg_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_7seg_1_exp = 7seg_1_expected_prev;
	end
	if (
		( 7seg_2_expected_prev !== 1'bx ) && ( 7seg_2_prev !== 7seg_2_expected_prev )
		&& ((7seg_2_expected_prev !== last_7seg_2_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port 7seg_2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", 7seg_2_expected_prev);
		$display ("     Real value = %b", 7seg_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_7seg_2_exp = 7seg_2_expected_prev;
	end
	if (
		( 7seg_3_expected_prev !== 1'bx ) && ( 7seg_3_prev !== 7seg_3_expected_prev )
		&& ((7seg_3_expected_prev !== last_7seg_3_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port 7seg_3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", 7seg_3_expected_prev);
		$display ("     Real value = %b", 7seg_3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_7seg_3_exp = 7seg_3_expected_prev;
	end
	if (
		( 7seg_a_expected_prev !== 1'bx ) && ( 7seg_a_prev !== 7seg_a_expected_prev )
		&& ((7seg_a_expected_prev !== last_7seg_a_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port 7seg_a :: @time = %t",  $realtime);
		$display ("     Expected value = %b", 7seg_a_expected_prev);
		$display ("     Real value = %b", 7seg_a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_7seg_a_exp = 7seg_a_expected_prev;
	end
	if (
		( 7seg_b_expected_prev !== 1'bx ) && ( 7seg_b_prev !== 7seg_b_expected_prev )
		&& ((7seg_b_expected_prev !== last_7seg_b_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port 7seg_b :: @time = %t",  $realtime);
		$display ("     Expected value = %b", 7seg_b_expected_prev);
		$display ("     Real value = %b", 7seg_b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_7seg_b_exp = 7seg_b_expected_prev;
	end
	if (
		( 7seg_c_expected_prev !== 1'bx ) && ( 7seg_c_prev !== 7seg_c_expected_prev )
		&& ((7seg_c_expected_prev !== last_7seg_c_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port 7seg_c :: @time = %t",  $realtime);
		$display ("     Expected value = %b", 7seg_c_expected_prev);
		$display ("     Real value = %b", 7seg_c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_7seg_c_exp = 7seg_c_expected_prev;
	end
	if (
		( 7seg_d_expected_prev !== 1'bx ) && ( 7seg_d_prev !== 7seg_d_expected_prev )
		&& ((7seg_d_expected_prev !== last_7seg_d_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port 7seg_d :: @time = %t",  $realtime);
		$display ("     Expected value = %b", 7seg_d_expected_prev);
		$display ("     Real value = %b", 7seg_d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_7seg_d_exp = 7seg_d_expected_prev;
	end
	if (
		( 7seg_e_expected_prev !== 1'bx ) && ( 7seg_e_prev !== 7seg_e_expected_prev )
		&& ((7seg_e_expected_prev !== last_7seg_e_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port 7seg_e :: @time = %t",  $realtime);
		$display ("     Expected value = %b", 7seg_e_expected_prev);
		$display ("     Real value = %b", 7seg_e_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_7seg_e_exp = 7seg_e_expected_prev;
	end
	if (
		( 7seg_f_expected_prev !== 1'bx ) && ( 7seg_f_prev !== 7seg_f_expected_prev )
		&& ((7seg_f_expected_prev !== last_7seg_f_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port 7seg_f :: @time = %t",  $realtime);
		$display ("     Expected value = %b", 7seg_f_expected_prev);
		$display ("     Real value = %b", 7seg_f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_7seg_f_exp = 7seg_f_expected_prev;
	end
	if (
		( 7seg_g_expected_prev !== 1'bx ) && ( 7seg_g_prev !== 7seg_g_expected_prev )
		&& ((7seg_g_expected_prev !== last_7seg_g_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port 7seg_g :: @time = %t",  $realtime);
		$display ("     Expected value = %b", 7seg_g_expected_prev);
		$display ("     Real value = %b", 7seg_g_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_7seg_g_exp = 7seg_g_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Projeto1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg ini_parar_rein;
reg modo;
reg reset;
// wires                                               
wire 7seg_1;
wire 7seg_2;
wire 7seg_3;
wire 7seg_a;
wire 7seg_b;
wire 7seg_c;
wire 7seg_d;
wire 7seg_e;
wire 7seg_f;
wire 7seg_g;

wire sampler;                             

// assign statements (if any)                          
Projeto1 i1 (
// port map - connection between master ports and signals/registers   
	.\7seg_1 (7seg_1),
	.\7seg_2 (7seg_2),
	.\7seg_3 (7seg_3),
	.\7seg_a (7seg_a),
	.\7seg_b (7seg_b),
	.\7seg_c (7seg_c),
	.\7seg_d (7seg_d),
	.\7seg_e (7seg_e),
	.\7seg_f (7seg_f),
	.\7seg_g (7seg_g),
	.clk(clk),
	.ini_parar_rein(ini_parar_rein),
	.modo(modo),
	.reset(reset)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// ini_parar_rein
initial
begin
	ini_parar_rein = 1'b0;
end 

// modo
initial
begin
	modo = 1'b0;
end 

// reset
initial
begin
	reset = 1'b1;
end 

Projeto1_vlg_sample_tst tb_sample (
	.clk(clk),
	.ini_parar_rein(ini_parar_rein),
	.modo(modo),
	.reset(reset),
	.sampler_tx(sampler)
);

Projeto1_vlg_check_tst tb_out(
	.7seg_1(7seg_1),
	.7seg_2(7seg_2),
	.7seg_3(7seg_3),
	.7seg_a(7seg_a),
	.7seg_b(7seg_b),
	.7seg_c(7seg_c),
	.7seg_d(7seg_d),
	.7seg_e(7seg_e),
	.7seg_f(7seg_f),
	.7seg_g(7seg_g),
	.sampler_rx(sampler)
);
endmodule

